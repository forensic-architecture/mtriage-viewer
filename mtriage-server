#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import subprocess as sp
import signal

SERVER_NAME = "forensicarchitecture/mviewserver"
DIR_PATH = os.path.dirname(os.path.realpath(__file__))


def get_cont_name():
    """ Get name of next mtriage instance based on existing containers. """
    names = sp.check_output(["docker", "ps", "-a", "--format", "{{.Names}}"])
    if isinstance(names, bytes):
        names = []
    else:
        names = names.split("\n")

    seed = 1
    cont_name = "mtriage_server_{}".format(seed)
    while cont_name in names:
        seed += 1
        cont_name = "mtriage_server_{}".format(seed)

    return cont_name


CONT_SERVER_NAME = get_cont_name()


def __build_server():
    server_img_name = "{}:dev".format(SERVER_NAME)
    print("Creating container to build server...")
    print("----------------------------------")
    try:
        sp.call(
            [
                "docker",
                "build",
                "-t",
                server_img_name,
                "--rm",
                "-f",
                "build/server.Dockerfile",
                "src",
            ]
        )
    except:
        print("__build_server: Something went wrong! EEK.")
    print("Server build successful.")
    print("----------------------------------")


def __build_viewer(viewer_name):
    viewer_img_name = "{}:{}".format(VIEWER_NAME, viewer_name)
    print("Creating container to build viewer plugin...")
    print("----------------------------------")
    try:
        sp.call(
            [
                "docker",
                "build",
                "-t",
                viewer_img_name,
                "-f",
                "build/viewer.Dockerfile",
                "viewers/" + viewer_name,
            ]
        )
    except:
        print("__build_viewer: Something went wrong! EEK.")
    print("Viewer plugin build successful.")
    print("----------------------------------")


def dev_server(args):
    print("Creating container to run server...")
    working_dir = args.input
    if working_dir is None or not os.path.exists(working_dir):
        raise Exception(
            "Not a valid directory. Pass one with './mtriage dev view:server -i path/to/directory'."
        )

    if args.rebuild:
        __build_server()

    sp.Popen(
        [
            "docker",
            "run",
            "--name",
            CONT_SERVER_NAME,
            "-p",
            "8080:8080",
            "--rm",
            "-v",
            "{}:/mtriage".format(DIR_PATH),
            "-v",
            # NOTE: assumes path is relative from the mtriage folder
            "{}/{}:/workingdir".format(DIR_PATH, working_dir),
            "{}:dev".format(SERVER_NAME),
        ]
    )
    print("Server running successfully in a container.")
    print("----------------------------------")

    def signal_handler(sig, frame):
        print("Removing containers...")
        sys.exit(0)

    signal.pause()
    signal.signal(signal.SIGINT, signal_handler)


def dev_viewer(args):
    print("Creating container to run viewer...")
    viewer_name = args.viewer
    viewer_img_name = "{}:{}".format(VIEWER_NAME, viewer_name)

    if viewer_name is None or not os.path.exists(
        "{}/src/lib/viewers/{}".format(DIR_PATH, viewer_name)
    ):
        raise Exception(
            "Not a valid viewer. Pass it with the -v option, making sure a corresponding directory exists in src/lib/viewers."
        )

    if args.rebuild:
        __build_viewer(viewer_name)

    process = sp.Popen(
        [
            "docker",
            "run",
            "--name",
            CONT_VIEWER_NAME,
            "-p",
            "8081:80",
            "--rm",
            "-v",
            "{}:/mtriage".format(DIR_PATH),
            viewer_img_name,
        ],
        stderr=sp.PIPE,
    )
    _, stderr = process.communicate()
    if stderr:
        print(stderr)
        exit(1)
    print(stdout)
    print("Viewer plugin successfully running in container.")
    print("----------------------------------")


def viewer(args):
    """ Must be invoked with an input folder and viewer-plugin e.g.:

			./mtriage view -i <working_dir> -v <viewer_plugin>

		Server requires that input folder is a correctly formatted mtriage working directory.

		Viewers must be yarn buildable apps living in the src/lib/viewers folder. Their name is taken to be the name
		of their outer directory. Viewers must specify which etype they accept in their config.yml file.

		Once launched the viewer plugin is available at http://localhost:8081/

		The server is available at http://localhost:8080/, with available endpoints:

		elementIndex                                - return an array of all element ids
		elements                                    - returns an array of all etyped elements (n.b. potentially slow)
		element?id=<element_id>                     - serves the element's etype data
		element?id=<element_id>&media=<media_file>  - serves the media file associated with element

		Example response for 'elementIndex':

		{
			"Elements": [
				<el1_id>,
				<el2_id>,
				<el3_id>,
				etc
			]
		}

		and 'element?id=<element_id>':

		{
			"Id": <element_id>,
			"Etype": <viewer_accepted_etype>,
			"Media": {
				<mediatype>: [
					<media1>,
					<media2>,
					<media3>,
				]
				etc.
			}
		}

	"""
    pass


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ("yes", "true", "t", "y", "1"):
        return True
    elif v.lower() in ("no", "false", "f", "n", "0"):
        return False
    else:
        raise argparse.ArgumentTypeError("Boolean value expected.")


if __name__ == "__main__":
    DEV_COMMANDS = {}
    parser = argparse.ArgumentParser(
        description="Golang server and frontend to visualise an mtriage folder structure."
    )
    parser.add_argument("--input", "-i", help="Input Folder", required=True)
    parser.add_argument(
        "--rebuild",
        type=str2bool,
        nargs="?",
        const=True,
        default=False,
        help="Pass to build Docker images locally",
        required=False,
    )
    args = parser.parse_args()

    dev_server(args)
