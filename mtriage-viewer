#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import threading
import subprocess as sp
import signal

SERVER_NAME = "forensicarchitecture/mviewserver"
VIEWER_NAME = "forensicarchitecture/mview_frontend"
DIR_PATH = os.path.dirname(os.path.realpath(__file__))

# ---- UTIL -------
def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ("yes", "true", "t", "y", "1"):
        return True
    elif v.lower() in ("no", "false", "f", "n", "0"):
        return False
    else:
        raise argparse.ArgumentTypeError("Boolean value expected.")


def get_cont_name(prefix="mtriage_server"):
    """ Get name of next mtriage instance based on existing containers. """
    names = sp.check_output(["docker", "ps", "-a", "--format", "{{.Names}}"])
    if isinstance(names, bytes):
        names = []
    else:
        names = names.split("\n")

    seed = 1
    cont_name = "{}_{}".format(prefix, seed)
    while cont_name in names:
        seed += 1
        cont_name = "{}_{}".format(prefix, seed)

    return cont_name


# ---- GLOBALS ----
CONT_SERVER_NAME = get_cont_name("mtriage_server")
CONT_VIEWER_NAME = get_cont_name("mtriage_viewer")


# ---- CORE ----
def __build_server():
    server_img_name = "{}:dev".format(SERVER_NAME)
    print("Creating container to build server...")
    print("----------------------------------")
    try:
        sp.call(
            [
                "docker",
                "build",
                "-t",
                server_img_name,
                "--rm",
                "-f",
                "build/server.Dockerfile",
                "src",
            ]
        )
    except:
        print("__build_server: Something went wrong! EEK.")
    print("Server build successful.")
    print("----------------------------------")


def __build_viewer(viewer_name):
    viewer_img_name = "{}:{}".format(VIEWER_NAME, viewer_name)
    print("Creating container to build viewer plugin...")
    print("----------------------------------")
    try:
        sp.call(
            [
                "docker",
                "build",
                "-t",
                viewer_img_name,
                "-f",
                "build/viewer.Dockerfile",
                "viewers/" + viewer_name,
            ]
        )
    except:
        print("__build_viewer: Something went wrong! EEK.")
    print("Viewer plugin build successful.")
    print("----------------------------------")


def dev_server(args):
    print("Creating container to run server...")
    working_dir = args.input
    if working_dir is None or not os.path.exists(working_dir):
        raise Exception(
            "Not a valid directory. Pass one with './mtriage dev view:server -i path/to/directory'."
        )

    if args.rebuild:
        __build_server()

    sp.Popen(
        [
            "docker",
            "run",
            "--name",
            CONT_SERVER_NAME,
            "-p",
            "8080:8080",
            "--rm",
            "-v",
            "{}:/mtriage".format(DIR_PATH),
            "-v",
            # NOTE: assumes path is relative from the mtriage folder
            "{}/{}:/workingdir".format(DIR_PATH, working_dir),
            "{}:dev".format(SERVER_NAME),
        ]
    )
    print("Server running successfully in a container.")

    def signal_handler(sig, frame):
        print("Removing containers...")
        sys.exit(0)

    signal.pause()
    signal.signal(signal.SIGINT, signal_handler)


def dev_viewer(args):
    print("Creating container to run viewer...")
    viewer_name = args.viewer if args.viewer else "main"
    viewer_img_name = "{}:{}".format(VIEWER_NAME, viewer_name)

    if viewer_name is None or not os.path.exists(
        "{}/viewers/{}".format(DIR_PATH, viewer_name)
    ):
        raise Exception(
            "Not a valid viewer. Pass it with the -v option, making sure a corresponding directory exists in src/lib/viewers."
        )

    if args.rebuild:
        __build_viewer(viewer_name)

    process = sp.Popen(
        [
            "docker",
            "run",
            "--name",
            CONT_VIEWER_NAME,
            "-p",
            "8081:80",
            "--rm",
            "-v",
            "{}:/mtriage".format(DIR_PATH),
            viewer_img_name,
        ],
        stderr=sp.PIPE,
    )
    print("Viewer plugin successfully running in container.")
    _, stderr = process.communicate()

    if stderr:
        print(stderr)
        exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Golang server and frontend to visualise an mtriage folder structure."
    )
    parser.add_argument(
        "--input", "-i", help="Path to the folder of elements to serve", required=True
    )
    parser.add_argument(
        "--viewer", "-v", help="Name of the viewer to use", required=False
    )
    parser.add_argument(
        "--onlyserver",
        type=str2bool,
        nargs="?",
        const=True,
        default=False,
        help="Don't run the viewer",
        required=False,
    )
    parser.add_argument(
        "--rebuild",
        type=str2bool,
        nargs="?",
        const=True,
        default=False,
        help="Pass to build Docker images locally",
        required=False,
    )
    args = parser.parse_args()

    t_server = threading.Thread(target=dev_server, args=(args,))
    t_server.start()
    if not args.onlyserver:
        t_viewer = threading.Thread(target=dev_viewer, args=(args,))
        t_viewer.start()
